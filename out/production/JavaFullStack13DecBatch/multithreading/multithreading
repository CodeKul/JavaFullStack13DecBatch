**Thread
- lightweight process
- smallest unit
- independent
- if there occurs exception in one thread, it doesn't affect other threads
- shared the memory area


Multitasking
- a process executing multiple tasks simultaneously.
2 ways to achieve multitasking
1. Multiprocessing
	- heavyweight
	- has a address in memory
	- cost of communication between the process is high
	- switching from one process to another process requires some time

2. MultiThreading
	- a process of executing multiple threads
	- lightweight
	- sharing the address space
	- cost of communication between thread is low
    - by default in every java application we have at least one thread - main thread


Life cycle of Thread
1. New(Born)
	- when we create a thread object, thread is born

2. Runnable
	- when the start() method is invoked that time new thread enters into
	runnable state
	- ready for execution
	- waiting for availability of the processor(CPU)

3. Running
	- execution of thread
	- when TS selects a thread from runnable state, it goes into running state

4. waiting/blocked
	- when a thread is suspended,sleeping or waiting for some time then it is in blocked/
	waiting state

5. Terminated/Dead
	- when stop() method is called
	- when thread run() method completes its execution

Thread Scheduler
 - part of JVM
 - decides which thread to run or execute  & which thread to wait
 - thread is selected only from runnable state
 - if there is more than one thread in runnable state, then it's up to TS to pick one thread

There are 2 ways to create thread in java
1. by extending thread class
	step:
		a) extends class with Thread class
		b) override run()
		c) create an object of extended class
		d) invoked start()
2. by implementing Runnable interface
		a) implementing class with Runnable interface
		b) override run()
		c) create an object of implemented class
		d) create an object of thread class to pass implemented class object as an argument
		e) invoked start()

Methods:
1. void run()
	- used to perform action on a thread

2. void start()
	- starts the execution of the thread.JVM calls the run() method

3. Thread currentThread()
	-  Returns a reference to the currently executing thread object

4. sleep(long ms)
	- sleep current executing thread for specified no of ms
	- throws the exception IllegalArgumentException when the time for sleeping is negative

Notes:
1. we required at least one process to execute the thread
2. at a time one thread is executed only

Homework
1. Difference between Thread & Process

